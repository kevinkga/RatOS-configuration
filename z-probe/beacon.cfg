# WARNING. DO NOT EDIT THIS FILE.
# To override settings from this file, you can copy and paste the relevant
# sections into your printer.cfg and change it there.

# Configurator Metadata
# {
#   "type": "static-probe",
#   "title": "Beacon"
# }

#####
# BEACON HARDWARE CONFIGURATION
#####
[beacon]
serial: /dev/beacon
x_offset: 0 
y_offset: 22.5 
mesh_main_direction: x
mesh_runs: 1
speed: 15.
lift_speed: 80.
contact_max_hotend_temperature: 275

# TODO: remove when automatically calculated by configurator
[bed_mesh]
mesh_min: 20,30

#####
# BEACON CONFIGURATION
#####
[gcode_macro RatOS]
variable_beacon_bed_mesh_scv: 25                        # square corner velocity for bed meshing with proximity method
variable_beacon_contact_z_homing: False                 # printer z-homing with contact method
variable_beacon_contact_z_calibration: False            # contact z-calibration before the print starts
                                                        # after changing this variable please run a recalibration before you use the printer  
												        # if you use a smooth PEI sheet turn this feature off

variable_beacon_contact_calibration_location: "center"  # center = center of the build plate
                                                        # front = front center
														# corner = front corner

variable_beacon_contact_calibrate_margin_x: 30          # x-margin if calibrate in front corners
variable_beacon_contact_bed_mesh: False                 # bed mesh with contact method
variable_beacon_contact_bed_mesh_samples: 2             # probe samples for contact bed mesh
variable_beacon_contact_z_tilt_adjust: False            # z-tilt adjust with contact method
variable_beacon_contact_z_tilt_adjust_samples: 2        # probe samples for contact z-tilt adjust
variable_beacon_contact_prime_probing: False            # probe for priming with contact method
variable_beacon_contact_calibration_temp: 150           # nozzle temperature for auto calibration
variable_beacon_contact_expansion_compensation: False   # enables the nozzle thermal expansion compensation
variable_beacon_contact_expansion_multiplier: 1.0       # multiplier for the nozzle thermal expansion compensation
#####
# BEACON COMMON
#####
[delayed_gcode _BEACON_INIT]
initial_duration: 0.1
gcode:
	# reset nozzle thermal expansion offset
	_BEACON_SET_NOZZLE_TEMP_OFFSET RESET=True
	
	
#####
# BEACON CALIBRATION
#####
[gcode_macro BEACON_INITIAL_CALIBRATION]
gcode:
	# config
	{% set speed = printer["gcode_macro RatOS"].macro_travel_speed * 60 %}
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
	{% set z_hop = printer.configfile.config.ratos_homing.z_hop|float %}
	{% set printable_x_max = printer["gcode_macro RatOS"].printable_x_max|float %}
	{% set printable_y_max = printer["gcode_macro RatOS"].printable_y_max|float %}
	{% set center_x = printable_x_max / 2 %}
	{% set center_y = printable_y_max / 2 %}

	# home x and y axis if not homed already
	MAYBE_HOME X=True Y=True

	# move to printable center
	G1 X{center_x} Y{center_y} F{(speed)}

	# auto calibrate beacon 
	BEACON_AUTO_CALIBRATE

	# raise toolhead to safe z-height
	G0 Z{z_hop} F{z_speed}

	# turn motors off 
	M84

	# echo
	RATOS_ECHO MSG="Initial beacon contact calibration finished!"


[gcode_macro BEACON_POKE_TEST]
gcode:
	# config
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
	{% set z_hop = printer.configfile.config.ratos_homing.z_hop|float %}

	# home and abl the printer if needed  
	BEACON_HOME_AND_ABL

	# lower toolhead to poking z-height
	G0 Z5 F{z_speed}

	# poke the bed
	{% for i in range(5) %}
		beacon_poke speed=3 top=5 bottom=-0.6
	{% endfor %}

	# raise toolhead to safe z-height
	G0 Z{z_hop} F{z_speed}

	# turn motors off 
	M84

	# echo
	RATOS_ECHO MSG="Beacon poke test finished!"


[gcode_macro BEACON_FINAL_CALIBRATION]
gcode:
	# parameters
	{% set bed_temp = params.BED_TEMP|default(85)|int %}

	# config
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
	{% set z_hop = printer.configfile.config.ratos_homing.z_hop|float %}
	{% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|default(0)|int %}

	# home and abl the printer if needed  
	BEACON_HOME_AND_ABL

	# lower toolhead to heat soaking z height
	G0 Z2 F{z_speed}

	# echo
	RATOS_ECHO MSG="Waiting for calibration temperature..."

	# heat up and wait for bed and extruder calibration temperatures 
	SET_HEATER_TEMPERATURE HEATER={'extruder' if default_toolhead == 0 else 'extruder1'} TARGET=150
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed_temp}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_temp} MAXIMUM={(bed_temp + 5)}
	TEMPERATURE_WAIT SENSOR={'extruder' if default_toolhead == 0 else 'extruder1'} MINIMUM=150 MAXIMUM=155

	# heat soak
	G4 P90000
	
	# auto calibrate beacon 
	BEACON_AUTO_CALIBRATE

	# turn bed and extruder heaters off 
	SET_HEATER_TEMPERATURE HEATER={'extruder' if default_toolhead == 0 else 'extruder1'} TARGET=0
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=0

	# raise toolhead to safe z-height
	G0 Z{z_hop} F{z_speed}

	# turn motors off 
	M84

	# echo
	RATOS_ECHO MSG="Final beacon contact calibration finished!"


#####
# BEACON NOZZLE TEMPERATURE OFFSET COMPENSATION
#####
[gcode_macro _BEACON_SET_NOZZLE_TEMP_OFFSET]
gcode:
	# parameters
	{% set toolhead = params.TOOLHEAD|default(0)|int %}
	{% set reset = true if params.RESET|default(false)|lower == 'true' else false %}

	# config 
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}

	# beacon config
	{% set beacon_contact_calibration_temp = printer["gcode_macro RatOS"].beacon_contact_calibration_temp|default(150)|int %}
	{% set beacon_contact_expansion_multiplier = printer["gcode_macro RatOS"].beacon_contact_expansion_multiplier|default(1.0)|float %}
	{% set beacon_contact_z_calibration = true if printer["gcode_macro RatOS"].beacon_contact_z_calibration|default(false)|lower == 'true' else false %}
	{% set beacon_contact_expansion_compensation = true if printer["gcode_macro RatOS"].beacon_contact_expansion_compensation|default(false)|lower == 'true' else false %}

	# ratos variables file
	{% set svv = printer.save_variables.variables %}

	{% if reset %}
		# reset applied offset
		SAVE_VARIABLE VARIABLE=nozzle_expansion_applied_offset VALUE=0

	{% else %}
		{% if beacon_contact_z_calibration and beacon_contact_expansion_compensation %}

			# get coefficient value
			{% set nozzle_expansion_coefficient_t0 = svv.nozzle_expansion_coefficient_t0|default(0)|float %}
			{% if printer["dual_carriage"] is defined %}
				{% set nozzle_expansion_coefficient_t1 = svv.nozzle_expansion_coefficient_t1|default(0)|float %}
			{% endif %}

			# get applied offset
			{% set applied_offset = svv.nozzle_expansion_applied_offset|default(0)|float %}

			# get extruder target temperature
			{% set temp = printer['extruder' if toolhead == 0 else 'extruder1'].target|float %}

			# calculate new offset
			{% set temp_offset = temp - beacon_contact_calibration_temp %}
			{% set expansion_coefficient = nozzle_expansion_coefficient_t0 if toolhead == 0 else nozzle_expansion_coefficient_t1 %}
			{% set expansion_offset = beacon_contact_expansion_multiplier * (temp_offset * (expansion_coefficient / 100)) %}

			# set new offset
			{% set new_offset = ((-applied_offset) + expansion_offset) %}
			SET_GCODE_OFFSET Z_ADJUST={new_offset} MOVE=1 SPEED={z_speed}
			SAVE_VARIABLE VARIABLE=nozzle_expansion_applied_offset VALUE={expansion_offset}

			# echo
			RATOS_ECHO PREFIX="BEACON" MSG={'"Nozzle expansion offset of %.6fmm applied to T%s"' % (expansion_offset, toolhead)}

		{% endif %}
	{% endif %}


[gcode_macro _BEACON_REMOVE_NOZZLE_TEMP_OFFSET]
gcode:
	# config 
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}

	# beacon config
	{% set beacon_contact_z_calibration = true if printer["gcode_macro RatOS"].beacon_contact_z_calibration|default(false)|lower == 'true' else false %}
	{% set beacon_contact_expansion_compensation = true if printer["gcode_macro RatOS"].beacon_contact_expansion_compensation|default(false)|lower == 'true' else false %}

	{% if beacon_contact_z_calibration and beacon_contact_expansion_compensation %}

		# ratos variables file
		{% set svv = printer.save_variables.variables %}

		# get applied offset
		{% set applied_offset = svv.nozzle_expansion_applied_offset|default(0)|float %}

		# remove applied offset
		{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
		SET_GCODE_OFFSET Z_ADJUST={(-applied_offset)} MOVE=0 SPEED={z_speed}

	{% endif %}


#####
# BEACON NOZZLE TEMPERATURE OFFSET CALIBRATION
#####
[gcode_macro BEACON_CALIBRATE_NOZZLE_TEMP_OFFSET]
variable_reference_z: 0.0
gcode:
	# config
	{% set test_margin = 30 %}
	{% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
	{% set z_hop = printer.configfile.config.ratos_homing.z_hop|float %}
	{% set printable_x_max = printer["gcode_macro RatOS"].printable_x_max|float %}
	{% set printable_y_max = printer["gcode_macro RatOS"].printable_y_max|float %}
	{% set safe_home_x = printer["gcode_macro RatOS"].safe_home_x %}
	{% if safe_home_x is not defined or safe_home_x|lower == 'middle' %}
		{% set safe_home_x = printable_x_max / 2 %}
	{% endif %}
	{% set safe_home_y = printer["gcode_macro RatOS"].safe_home_y %}
	{% if safe_home_y is not defined or safe_home_y|lower == 'middle' %}
		{% set safe_home_y = printable_y_max / 2 %}
	{% endif %}
	{% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|default(0)|int %}

	# beacon config
	{% set beacon_contact_z_calibration = true if printer["gcode_macro RatOS"].beacon_contact_z_calibration|default(false)|lower == 'true' else false %}

	{% if beacon_contact_z_calibration %}

		# home and abl the printer if needed  
		BEACON_HOME_AND_ABL

		# echo
		RATOS_ECHO PREFIX="BEACON" MSG="Nozzle temperature offset calibration..."

		# settle the mechanics down  
		{% for i in range(10) %}
			beacon_poke speed=3 top=5 bottom=-0.6
		{% endfor %}

		# get and set start temperature offset 
		_BEACON_PROBE_NOZZLE_TEMP_OFFSET TEMP=150
		_BEACON_STORE_NOZZLE_TEMP_OFFSET TEMP=150

		# get and set end temperature offset
		_BEACON_PROBE_NOZZLE_TEMP_OFFSET TEMP=250
		_BEACON_STORE_NOZZLE_TEMP_OFFSET TEMP=250

		# get and set start temperature offset 
		_BEACON_PROBE_NOZZLE_TEMP_OFFSET TEMP=150
		_BEACON_STORE_NOZZLE_TEMP_OFFSET TEMP=150

		# get and set end temperature offset
		_BEACON_PROBE_NOZZLE_TEMP_OFFSET TEMP=250
		_BEACON_STORE_NOZZLE_TEMP_OFFSET TEMP=250

		# move back to home position
		G0 Z{z_hop} F{z_speed}
		G0 X{safe_home_x} Y{safe_home_y} F{speed}

		# turn heater off
		SET_HEATER_TEMPERATURE HEATER={"extruder" if default_toolhead == 0 else "extruder1"} TARGET=0

		# echo results
		_BEACON_ECHO_NOZZLE_TEMP_OFFSETS

	{% endif %}


[gcode_macro _BEACON_PROBE_NOZZLE_TEMP_OFFSET]
gcode:
	# parameters
	{% set temp = params.TEMP|int %}

	# config
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
	{% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|default(0)|int %}

	# ratos variables file
	{% set svv = printer.save_variables.variables %}

	# get reference point coordinates
	{% set idex_zcontrolpoint = svv.idex_zcontrolpoint|default(150)|float %}

	# wait for noozle to reach the probing temperature
	RATOS_ECHO PREFIX="BEACON" MSG="Waiting for nozzle to reach {temp}°C..."
	SET_HEATER_TEMPERATURE HEATER={"extruder" if default_toolhead == 0 else "extruder1"} TARGET={temp}
	TEMPERATURE_WAIT SENSOR={"extruder" if default_toolhead == 0 else "extruder1"} MINIMUM={temp} MAXIMUM={temp + 2}

	# wait for temperature to settle down
	RATOS_ECHO PREFIX="BEACON" MSG="Waiting for thermal expansion..."
	G4 P60000

	# probe
	RATOS_ECHO PREFIX="BEACON" MSG="Probing with nozzle temperature {temp}°C..."
	PROBE PROBE_METHOD=contact PROBE_SPEED=3 LIFT_SPEED=15 SAMPLES=5 SAMPLE_RETRACT_DIST=3 SAMPLES_TOLERANCE=0.005 SAMPLES_TOLERANCE_RETRIES=10 SAMPLES_RESULT=median
	BEACON_QUERY

	# raise z
	G0 Z5 F{z_speed}


[gcode_macro _BEACON_STORE_NOZZLE_TEMP_OFFSET]
gcode:
	# parameters
	{% set temp = params.TEMP|int %}

	# config
	{% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|default(0)|int %}

	# ratos variables file
	{% set svv = printer.save_variables.variables %}

	# get last probe result
	{% set last_z = printer.beacon.last_z_result|default(0)|float %}

	# set temperature offset
	{% if temp == 150 %}
		SET_GCODE_VARIABLE MACRO=BEACON_CALIBRATE_NOZZLE_TEMP_OFFSET VARIABLE=reference_z VALUE={last_z}
	{% else %}
		{% set reference_z = printer["gcode_macro BEACON_CALIBRATE_NOZZLE_TEMP_OFFSET"].reference_z|default(0)|float %}
		SAVE_VARIABLE VARIABLE=nozzle_expansion_coefficient_t{default_toolhead} VALUE={(last_z - reference_z)}
	{% endif %}


[gcode_macro _BEACON_ECHO_NOZZLE_TEMP_OFFSETS]
gcode:
	# config
	{% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|default(0)|int %}

	# ratos variables file
	{% set svv = printer.save_variables.variables %}

	# echo
	{% if default_toolhead == 0 %}
		CONSOLE_ECHO TYPE="result" MSG={'"T0 expansion coefficient %.6f"' % svv.nozzle_expansion_coefficient_t0}
	{% else %}
		CONSOLE_ECHO TYPE="result" MSG={'"T1 expansion coefficient %.6f"' % svv.nozzle_expansion_coefficient_t1}
	{% endif %}


#####
# BEACON MEASURE GANTRY TWIST
#####
[gcode_macro BEACON_MEASURE_GANTRY_TWIST]
variable_reference_z: 0.0
variable_front: 0.0
variable_front_left: 0.0
variable_front_right: 0.0
variable_back: 0.0
variable_back_left: 0.0
variable_back_right: 0.0
variable_right: 0.0
variable_left: 0.0
gcode:
	# parameters
	{% set margin_x = params.MARGIN_X|default(40)|int %}
	{% set margin_y = params.MARGIN_Y|default(40)|int %}

	# config
	{% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
	{% set z_hop = printer.configfile.config.ratos_homing.z_hop|float %}
	{% set printable_x_max = printer["gcode_macro RatOS"].printable_x_max|float %}
	{% set printable_y_max = printer["gcode_macro RatOS"].printable_y_max|float %}
	{% set safe_home_x = printer["gcode_macro RatOS"].safe_home_x %}
	{% if safe_home_x is not defined or safe_home_x|lower == 'middle' %}
		{% set safe_home_x = printable_x_max / 2 %}
	{% endif %}
	{% set safe_home_y = printer["gcode_macro RatOS"].safe_home_y %}
	{% if safe_home_y is not defined or safe_home_y|lower == 'middle' %}
		{% set safe_home_y = printable_y_max / 2 %}
	{% endif %}

	# beacon config
	{% set beacon_contact_z_calibration = true if printer["gcode_macro RatOS"].beacon_contact_z_calibration|default(false)|lower == 'true' else false %}

	{% if beacon_contact_z_calibration %}

		# home and abl the printer if needed  
		BEACON_HOME_AND_ABL

		# echo  
		RATOS_ECHO PREFIX="BEACON" MSG="Measure gantry twist..."

		# settle the mechanics down  
		{% for i in range(10) %}
			beacon_poke speed=3 top=5 bottom=-0.6
		{% endfor %}

		# probe reference location
		_BEACON_PROBE_GANTRY_TWIST
		_BEACON_STORE_GANTRY_TWIST LOCATION="center"
		
		# probe front left
		G0 X{margin_x} Y{margin_y} F{speed}
		_BEACON_PROBE_GANTRY_TWIST
		_BEACON_STORE_GANTRY_TWIST LOCATION="front_left"

		# probe front
		G0 X{safe_home_x} Y{margin_y} F{speed}
		_BEACON_PROBE_GANTRY_TWIST
		_BEACON_STORE_GANTRY_TWIST LOCATION="front"

		# probe front right
		G0 X{(printable_x_max - margin_x)} Y{margin_y} F{speed}
		_BEACON_PROBE_GANTRY_TWIST
		_BEACON_STORE_GANTRY_TWIST LOCATION="front_right"

		# probe right
		G0 X{(printable_x_max - margin_x)} Y{safe_home_y} F{speed}
		_BEACON_PROBE_GANTRY_TWIST
		_BEACON_STORE_GANTRY_TWIST LOCATION="right"

		# probe back right
		G0 X{(printable_x_max - margin_x)} Y{(printable_y_max - margin_y)} F{speed}
		_BEACON_PROBE_GANTRY_TWIST
		_BEACON_STORE_GANTRY_TWIST LOCATION="back_right"

		# probe back
		G0 X{safe_home_x} Y{(printable_y_max - margin_y)} F{speed}
		_BEACON_PROBE_GANTRY_TWIST
		_BEACON_STORE_GANTRY_TWIST LOCATION="back"

		# probe back left
		G0 X{margin_x} Y{(printable_y_max - margin_y)} F{speed}
		_BEACON_PROBE_GANTRY_TWIST
		_BEACON_STORE_GANTRY_TWIST LOCATION="back_left"

		# probe left
		G0 X{margin_x} Y{safe_home_y} F{speed}
		_BEACON_PROBE_GANTRY_TWIST
		_BEACON_STORE_GANTRY_TWIST LOCATION="back_left"

		# move back to home position
		G0 Z{z_hop} F{z_speed}
		G0 X{safe_home_x} Y{safe_home_y} F{speed}

		# echo results
		_BEACON_ECHO_GANTRY_TWIST

	{% endif %}


[gcode_macro _BEACON_PROBE_GANTRY_TWIST]
gcode:
	# echo
	RATOS_ECHO PREFIX="BEACON" MSG="Probing..."

	# probe
	BEACON_OFFSET_COMPARE
	BEACON_QUERY


[gcode_macro _BEACON_STORE_GANTRY_TWIST]
gcode:
	# parameters
	{% set location = params.LOCATION|lower %}

	# config
	{% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|default(0)|int %}

	# get last probe result
	{% set last_z = printer.beacon.last_offset_result["delta"]|default(0)|float %}

	# set gantry offset
	{% if location == "center" %}
		SET_GCODE_VARIABLE MACRO=BEACON_MEASURE_GANTRY_TWIST VARIABLE=reference_z VALUE={last_z}
	{% else %}
		{% set reference_z = printer["gcode_macro BEACON_MEASURE_GANTRY_TWIST"].reference_z|default(0)|float %}
		SET_GCODE_VARIABLE MACRO=BEACON_MEASURE_GANTRY_TWIST VARIABLE={location} VALUE={(last_z - reference_z)}
	{% endif %}


[gcode_macro _BEACON_ECHO_GANTRY_TWIST]
gcode:
	# get results
	{% set reference_z = printer["gcode_macro BEACON_MEASURE_GANTRY_TWIST"].reference_z|default(0)|float %}
	{% set front_left = printer["gcode_macro BEACON_MEASURE_GANTRY_TWIST"].front_left|default(0)|float %}
	{% set front = printer["gcode_macro BEACON_MEASURE_GANTRY_TWIST"].front|default(0)|float %}
	{% set front_right = printer["gcode_macro BEACON_MEASURE_GANTRY_TWIST"].front_right|default(0)|float %}
	{% set right = printer["gcode_macro BEACON_MEASURE_GANTRY_TWIST"].right|default(0)|float %}
	{% set back_right = printer["gcode_macro BEACON_MEASURE_GANTRY_TWIST"].back_right|default(0)|float %}
	{% set back = printer["gcode_macro BEACON_MEASURE_GANTRY_TWIST"].back|default(0)|float %}
	{% set back_left = printer["gcode_macro BEACON_MEASURE_GANTRY_TWIST"].back_left|default(0)|float %}
	{% set left = printer["gcode_macro BEACON_MEASURE_GANTRY_TWIST"].left|default(0)|float %}

	{% set line_1 = "Front left:    %.6fmm" % front_left %}
	{% set line_2 = "Front center:  %.6fmm" % front %}
	{% set line_3 = "Front right:   %.6fmm" % front_right %}
	{% set line_4 = "Left center:   %.6fmm" % left %}
	{% set line_5 = "Right center:  %.6fmm" % right %}
	{% set line_6 = "Back left:     %.6fmm" % back_left %}
	{% set line_7 = "Back center:   %.6fmm" % back %}
	{% set line_8 = "Back right:    %.6fmm" % back_right %}

	# console echo
	CONSOLE_ECHO TITLE="Gantry twist relative to the center" TYPE="result" MSG={'"%s_N_%s_N_%s_N_%s_N_%s_N_%s_N_%s_N_%s"' % (line_1, line_2, line_3, line_4, line_5, line_6, line_7, line_8)}


#####
# BEACON UTILS
#####
[gcode_macro BEACON_HOME_AND_ABL]
gcode:
	# config
	{% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
	{% set z_hop_speed = printer.configfile.config.ratos_homing.z_hop_speed|float * 60 %}
	{% set z_hop = printer.configfile.config.ratos_homing.z_hop|float %}
	{% set printable_x_max = printer["gcode_macro RatOS"].printable_x_max|float %}
	{% set printable_y_max = printer["gcode_macro RatOS"].printable_y_max|float %}
	{% set safe_home_x = printer["gcode_macro RatOS"].safe_home_x %}
	{% if safe_home_x is not defined or safe_home_x|lower == 'middle' %}
		{% set safe_home_x = printable_x_max / 2 %}
	{% endif %}
	{% set safe_home_y = printer["gcode_macro RatOS"].safe_home_y %}
	{% if safe_home_y is not defined or safe_home_y|lower == 'middle' %}
		{% set safe_home_y = printable_y_max / 2 %}
	{% endif %}

	# home if not homed already
	MAYBE_HOME

	# automatic bed leveling
	{% set needs_rehoming = False %}
	{% if printer.z_tilt is defined and not printer.z_tilt.applied %}
		RATOS_ECHO MSG="Adjusting Z tilt..."
		Z_TILT_ADJUST
		RATOS_ECHO MSG="Rehoming Z after Z tilt adjustment..."
		{% set needs_rehoming = True %}
	{% endif %}
	{% if printer.quad_gantry_level is defined and not printer.quad_gantry_level.applied %}
	 	RATOS_ECHO MSG="Running quad gantry leveling..."
		QUAD_GANTRY_LEVEL 
		RATOS_ECHO MSG="Rehoming Z after quad gantry leveling..."
		{% set needs_rehoming = True %}
	{% endif %}

	# Home again as Z will have changed after automatic bed leveling.
	{% if needs_rehoming %}
		G0 Z{z_hop} F{z_hop_speed}
		G0 X{safe_home_x} Y{safe_home_y} F{speed}
		{% if printer.configfile.settings.beacon is defined and beacon_contact_z_homing %}
			BEACON_AUTO_CALIBRATE  
			G0 Z{z_hop} F{z_hop_speed}
			G0 X{safe_home_x} Y{safe_home_y} F{speed}
		{% else %}
			G28 Z
		{% endif %}
	{% endif %}

	# beacon autocalibration
	G0 Z{z_hop} F{z_speed}
	G0 X{safe_home_x} Y{safe_home_y} F{speed}
	G0 Z5 F{z_speed}
	BEACON_AUTO_CALIBRATE

	# move back to home position
	G0 Z{z_hop} F{z_speed}
	G0 X{safe_home_x} Y{safe_home_y} F{speed}


[gcode_macro POKELOOP]
gcode:
  {% for i in range(100) %}
      beacon_poke speed=3 top=5 bottom=-0.3
  {% endfor %}
